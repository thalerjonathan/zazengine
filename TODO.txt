TODOs, Refactorings & Optimizations
- fix sky-box
	-> shadowing of sky-box not wanted: if materialType == skybox then don't apply shadowing!
- analyse deprecated stuff using gDEBugger
	-> force core-profile when creating opengl context from windows

- Program- & Shader-Management: describe by xml, is annoying to manually set up in program-code
	-> frag-data location
	-> bind uniform blocks
	-> ...
	-> lookup program in program-registry during runtime

- reduce OpenGL-calls/state-changes
	-> no need to turn on/off buffer-stuff for each geometry-rendering, turn on for batch-processing and then turn off
- optimzie shaders
	-> pre multiply matrices in CPU, branching
- caching of uniform-locations in program: only need for one lookup!
- use layout in shaders
- remove redundant calls
	-> check if all unbinds are really necessary
	-> some checks are only necessary when debugging => use macros for #ifdef (DEBUG)
		-> e.g. fbo-status checks
- experiment with different render-target formats for performance
- spot-light boundary: load sphere without normals, uv,... & project with perspective into scene using camera MVP

- split lighting-pass into "ambient&sky-box pass" & lighting-pass for each light
	 => no lighting/shadowing of sky-box & objects visible also when no light in scene present
- use stencil buffer to mask skybox from lighting&shading
- implement #include in shaders: parse loaded string and replace
	-> problem: compiler error generate other line numbers!



Rendering-Algorithms
- shadow-mapping
	-> correct lighting&shadowing equations: falloff, cone, ...
	-> do some sampling on shadow-edges
- multiple lights
	-> blending 
- point-lights
- normal-mapping
- advanced brdfs
	-> sub-surface-scattering brdf
	-> cook torrance sparrow
	-> subsurface scattering
	-> microfacet
- text-rendering
- msaa
	-> do sampling in geometry fragment-shader (centroid)
- Fix View-Frustum culling

Advanced Graphic-Techniques
- transparency
- reflections
- culling library (Umbra 3)

Game-Functionality
- allow mutliple scenes which can be changed during runtime. also specify which subsystems are necessary: load/unload them during runtime

Scenes
- brdf & model gallery
	-> famous models with all different brdfs placed in scene like in a gallery
	-> advanced brdfs
	-> shadowing
	-> lighting
	-> find some interesting "skybox" or surrounding model: http://www.3dmodelfree.com/

	Famous models (Stanford http://graphics.stanford.edu/data/3Dscanrep/ & Utah Teapot)
	-> teapot
	-> bunny
	-> dragon
	-> happy buddah
	-> armadillo
	-> lucy
	-> Asian Dragon
	-> Thai Statue

- qualcomm presentation
- chess
	-> show the chess-board 
	-> different material for black & white
	-> board reflects
	-> white transparent
	-> black subsurface scattering brdf
- rotating hyperdrive
	-> point light in center
	-> interesting shadow situation
- physics
	-> mesh
	-> spheres
	-> oder models fall down
	
Multithreading
- make physics processing async

Scripting
- TODO

Code-Quality
- const-completeness (add const to inline methods were appropriate)
- replace all strcmp with boost:iequals
- keep id, type & core in ISubSystem as readable
- remove friend-initialisation bullshit from entities
- project buildable as RELEASE
- check if everything is cleaned up when a subsystem cannot be initialized
- A GOOD SOLUTION FOR THE PROBLEM OF INCLUDING TINY-XML IN ALL SUBSYSTEMS
- fmod-subsystem should do a proper loading and managing of its loaded sound (same as e.g. textures in graphics)
- UNIT-Tests?
