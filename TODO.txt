Clean-Up
- ortho-Proj in renderer (lighting-stage & visualisation of MRT) & camera->restore
- render shadow-map: clearing of FBO not necessary this way & move drawNone after init
- force sky-box perspective projection
- fix mrt-visualisation
- lighting stage doesn't need load_matrix calls, is done in shader
- set fov of spotlight in xml
- set height, width + depth of directional light in xml
- check light-space-matrix: UnitCube * LightPROJECTION * LightVIEWING 
- do inverse camera view-matrix calculation on CPU and send to Shader using uniform
- find more high-level approach to send matrices to uniform blocks (no void* & bytecount & offset, encapsulate in some way)

Basic Graphics
- shadow-mapping
- normal-mapping
- other brdfs
- multiple lights
	-> point-light boundary
	-> spot-light boundary
	-> directional full screen quad
	-> blending 
- remove ALL legacy-calls (use gDEBugger for help)
- msaa
	-> do sampling in geometry fragment-shader (centroid)
- optimization
	-> OpenGL-calls
	-> shaders
	-> initializations of shader
	-> use layout in shaders
	-> state-changes
- Fix View-Frustum culling


Advanced Graphics
- transparency
- reflections
- brdfs
	-> cook torrance sparrow
	-> subsurface scattering
	-> microfacet
- culling library (Umbra 3)

Game-Functionality
- allow mutliple scenes which can be changed during runtime. also specify which subsystems are necessary: load/unload them during runtime

Scenes
- qualcomm presentation
- brdf & model gallery
	-> famous models with all different brdfs placed in scene like in a gallery
	-> advanced brdfs
	-> shadowing
	-> lighting
- chess
	-> show the chess-board 
	-> different material for black & white
	-> board reflects
	-> white transparent
	-> black subsurface scattering brdf
- rotating hyperdrive
	-> point light in center
	-> interesting shadow situation
- physics
	-> mesh
	-> spheres
	-> oder models fall down
	
Multithreading
- make physics processing async

Scripting
- TODO

Code-Quality
- replace all strcmp with boost:iequals
- add const to inline methods were appropriate
- keep id, type & core in ISubSystem as readable
- remove friend-initialisation bullshit from entities
- project buildable as RELEASE
- check if everything is cleaned up when a subsystem cannot be initialized
- A GOOD SOLUTION FOR THE PROBLEM OF INCLUDING TINY-XML IN ALL SUBSYSTEMS
- fmod-subsystem should do a proper loading and managing of its loaded sound (same as e.g. textures in graphics)
- UNIT-Tests?
